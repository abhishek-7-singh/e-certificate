// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Relationship {
  FATHER
  MOTHER
  BROTHER
  SISTER
  UNCLE
  AUNT
  GRANDFATHER
  GRANDMOTHER
  SON
  DAUGHTER
  SPOUSE
  SELF
  OTHERS
}

enum DeliveryOption {
  DELIVERY
  PICK_UP
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  gender                  Gender?
  phoneNo                 String?
  dateOfBirth             DateTime?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId
  BirthCertificate        BirthCertificate[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model BirthCertificate {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  userId               String           @db.ObjectId
  requesterId          String           @db.ObjectId
  firstName            String
  middleName           String?
  lastName             String
  placeOfBirthCountry  String
  placeOfBirthProvince String
  placeOfBirthCity     String
  DateOfBirth          String
  gender               Gender
  fatherFirstName      String
  fatherMiddleName     String?
  fatherLastName       String
  motherFirstName      String
  motherMiddleName     String?
  motherLastName       String
  deliveryDetails      DeliveryDetails?

  requester Requester @relation(fields: [requesterId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, requesterId])
}

model Requester {
  id                           String             @id @default(auto()) @map("_id") @db.ObjectId
  requesterFirstName           String
  requesterMiddleName          String?
  requesterLastName            String
  requesterEmail               String             @unique
  requesterMobileNumber        String             @unique
  requesterRelationshipToOwner Relationship
  BirthCertificate             BirthCertificate[]
}

model DeliveryDetails {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  deliveryOption       DeliveryOption
  deliveryProvince     String
  deliveryDistrict     String
  deliveryAddress      String
  deliveryMunicipality String?
  deliveryWard         String?
  deliveryPostalCode   String?

  birthCertificate   BirthCertificate? @relation(fields: [birthCertificateId], references: [id])
  birthCertificateId String            @db.ObjectId

  @@unique([birthCertificateId])
}
